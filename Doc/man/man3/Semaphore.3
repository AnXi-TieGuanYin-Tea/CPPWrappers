.TH "Semaphore" 3 "Sun Oct 16 2011" "Version 0.3" "CPPWrappers" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Semaphore \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Semaphore\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSemaphore\fP (char name[], unsigned int val)"
.br
.RI "\fIConstructor'\&. \fP"
.ti -1c
.RI "int \fBwait\fP ()"
.br
.RI "\fIThe semaphor is locked'\&. \fP"
.ti -1c
.RI "int \fBpost\fP ()"
.br
.RI "\fIThe semaphore referenced by sem is unlocked, the value of the semaphore is incremented, and all threads which are waiting on the semaphore are awakened'\&. \fP"
.ti -1c
.RI "int \fBtryWait\fP ()"
.br
.RI "\fIIf the semaphore is locked \fBwait()\fP will not block and return an error, otherwise it will lock the semaphore'\&. \fP"
.ti -1c
.RI "void \fBclose\fP ()"
.br
.RI "\fICloses the semaphore'\&. \fP"
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Semaphore::Semaphore (charname[], unsigned intval)"
.PP
Constructor'\&. \fBParameters:\fP
.RS 4
\fIname,:\fP The name of the mutex, must start with '/' on linux systems 
.br
\fIval\fP the initial value of the semaphore 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Semaphore::close ()"
.PP
Closes the semaphore'\&. 
.SS "int Semaphore::post ()"
.PP
The semaphore referenced by sem is unlocked, the value of the semaphore is incremented, and all threads which are waiting on the semaphore are awakened'\&. \fBReturns:\fP
.RS 4
If successful, \fBpost()\fP will return 0'\&. Otherwise, -1 is returned and errno is set 
.RE
.PP

.SS "int Semaphore::tryWait ()"
.PP
If the semaphore is locked \fBwait()\fP will not block and return an error, otherwise it will lock the semaphore'\&. \fBSee also:\fP
.RS 4
\fBwait()\fP 
.RE
.PP

.SS "int Semaphore::wait ()"
.PP
The semaphor is locked'\&. When calling \fBwait()\fP, if the semaphore's value is zero, the calling thread will block until the lock is acquired or until the call is interrupted by a signal'\&. Alternatively, the trywait() function will fail if the semaphore is already locked, rather than blocking on the semaphore'\&. 
.PP
\fBReturns:\fP
.RS 4
If successful (the lock was acquired), \fBwait()\fP and trywait() will return 0'\&. Otherwise, -1 is returned and errno is set, and the state of the semaphore is unchanged'\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for CPPWrappers from the source code'\&.
